% Auto-generated by cameraCalibrator app on 10-Nov-2022
%-------------------------------------------------------


% Define images to process
left_imageFileNames = {'/home/terabotics/SurfaceControl_ws/src/surfacecontrol_ros/config/calibrationdata_left_camera/left-0001.png',...
    '/home/terabotics/SurfaceControl_ws/src/surfacecontrol_ros/config/calibrationdata_left_camera/left-0003.png',...
    '/home/terabotics/SurfaceControl_ws/src/surfacecontrol_ros/config/calibrationdata_left_camera/left-0004.png',...
    '/home/terabotics/SurfaceControl_ws/src/surfacecontrol_ros/config/calibrationdata_left_camera/left-0013.png',...
    '/home/terabotics/SurfaceControl_ws/src/surfacecontrol_ros/config/calibrationdata_left_camera/left-0014.png',...
    '/home/terabotics/SurfaceControl_ws/src/surfacecontrol_ros/config/calibrationdata_left_camera/left-0017.png',...
    '/home/terabotics/SurfaceControl_ws/src/surfacecontrol_ros/config/calibrationdata_left_camera/left-0018.png',...
    '/home/terabotics/SurfaceControl_ws/src/surfacecontrol_ros/config/calibrationdata_left_camera/left-0019.png',...
    '/home/terabotics/SurfaceControl_ws/src/surfacecontrol_ros/config/calibrationdata_left_camera/left-0020.png',...
    '/home/terabotics/SurfaceControl_ws/src/surfacecontrol_ros/config/calibrationdata_left_camera/left-0026.png',...
    %'/home/terabotics/SurfaceControl_ws/src/surfacecontrol_ros/config/calibrationdata_left_camera/left-0029.png',...
    %'/home/terabotics/SurfaceControl_ws/src/surfacecontrol_ros/config/calibrationdata_left_camera/left-0030.png',...
    %'/home/terabotics/SurfaceControl_ws/src/surfacecontrol_ros/config/calibrationdata_left_camera/left-0033.png',...
    %'/home/terabotics/SurfaceControl_ws/src/surfacecontrol_ros/config/calibrationdata_left_camera/left-0035.png',...
    };
%%
% Detect calibration pattern in images
detector_left = vision.calibration.monocular.CheckerboardDetector();
[imagePoints_left, imagesUsed_left] = detectPatternPoints(detector_left, left_imageFileNames);
left_imageFileNames = left_imageFileNames(imagesUsed_left);

% Read the first image to obtain image size
originalImage_left = imread(left_imageFileNames{1});
[mrows_left, ncols_left, ~] = size(originalImage_left);

% Generate world coordinates for the planar pattern keypoints
squareSize = 10;  % in units of 'millimeters'
worldPoints_left = generateWorldPoints(detector_left, 'SquareSize', squareSize);

% Calibrate the camera
[cameraParams_left, imagesUsed_left, estimationErrors_left] = estimateCameraParameters(imagePoints_left, worldPoints_left, ...
    'EstimateSkew', true, 'EstimateTangentialDistortion', true, ...
    'NumRadialDistortionCoefficients', 2, 'WorldUnits', 'millimeters', ...
    'InitialIntrinsicMatrix', [], 'InitialRadialDistortion', [], ...
    'ImageSize', [mrows_left, ncols_left]);

% View reprojection errors
h1=figure; showReprojectionErrors(cameraParams_left);

% Visualize pattern locations
h2=figure; showExtrinsics(cameraParams_left, 'CameraCentric');

% Display parameter estimation errors
displayErrors(estimationErrors_left, cameraParams_left);

% For example, you can use the calibration data to remove effects of lens distortion.
undistortedImage_left = undistortImage(originalImage_left, cameraParams_left);
msg_left = rosmessage("sensor_msgs/CameraInfo","DataFormat","struct");
[msgOut_left] = rosWriteCameraInfo(msg_left,toStruct(cameraParams_left));

% See additional examples of how to use the calibration data.  At the prompt type:
% showdemo('MeasuringPlanarObjectsExample')
% showdemo('StructureFromMotionExample')
